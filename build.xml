<?xml version="1.0"?>
<!--
//////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2002-2005, Andrew S. Townley
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 
//     * Redistributions of source code must retain the above
//     copyright notice, this list of conditions and the following
//     disclaimer.
// 
//     * Redistributions in binary form must reproduce the above
//     copyright notice, this list of conditions and the following
//     disclaimer in the documentation and/or other materials provided
//     with the distribution.
// 
//     * Neither the names Andrew Townley and Townley Enterprises,
//     Inc. nor the names of its contributors may be used to endorse
//     or promote products derived from this software without specific
//     prior written permission.  
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
// OF THE POSSIBILITY OF SUCH DAMAGE.
//
// File:	build.xml
//
//////////////////////////////////////////////////////////////////////
-->

<project name="te-common" default="all" basedir=".">
	<property name="app.name"	value="${ant.project.name}"/>
	<property name="ext.dir"	value="extensions"/>
	<property name="build.home"	value="build/${app.name}"/>
	<property name="build.dir"	value="build/classes"/>
	<property name="build.tests"	value="build/tests"/>
	<property name="reports.tests"	value="build/reports"/>
	<property name="lib.dir"	value="lib"/>
	<property name="src.dir"	value="java"/>
	<property name="tests.dir"	value="tests/java"/>
	<property name="tests.lib.dir"	value="tests/lib"/>
	<property name="tests.data.dir"	value="tests/data"/>
	<property name="stamp.info"	value="${basedir}/version.properties"/>

	<target name="bootstrap">
		<mkdir dir="${build.dir}"/>
		<javac srcdir="${src.dir}" destdir="${build.dir}"
			classpathref="build.cp" debug="on" deprecation="on">
			<include name="**/ant/*.java"/>
			<include name="**/common/Path.java"/>
		</javac>
		<jar jarfile="${app.name}-ant.jar" basedir="${build.dir}">
			<include name="**/ant/*.class"/>
			<include name="**/common/Path.class"/>
		</jar>
  		<taskdef name="buildstamp" classname="com.townleyenterprises.ant.BuildStampTask" classpath="te-common-ant.jar"/>
	</target>

	<path id="stampfiles">
		<fileset dir="${basedir}">
			<include name="**/*.in"/>
		</fileset>
	</path>

	<target name="verstamp" depends="bootstrap">
		<buildstamp versioninfo="${stamp.info}">
			<path refid="stampfiles"/>
		</buildstamp>
		<property name="dist.dir"	value="${app.name}-${version}"/>
	</target>

	<target name="cmbuild" depends="bootstrap, distclean">
		<!-- increment the build counter -->
		<buildstamp versioninfo="${stamp.info}" count="true">
			<path refid="stampfiles"/>
		</buildstamp>
		<property name="dist.dir"	value="${app.name}-${version}"/>

		<echo message="Building ${build.version.project}: ${build.version} (Build ${build.version.count}; ${build.version.date})"/>

		<!-- these must be called in this order -->
		<antcall target="dist"/>
		<antcall target="bin-dist"/>
	</target>
			
	<path id="build.cp">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<path id="tests.cp">
		<fileset dir="${tests.lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<target name="all" depends="verstamp,jar" />

	<target name="compile">
		<mkdir dir="${build.dir}"/>
		<copy todir="${build.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java"/>
				<exclude name="**/package.html"/>
			</fileset>
		</copy>
		<javac srcdir="${src.dir}" destdir="${build.dir}"
			classpathref="build.cp" debug="on" deprecation="on">
			<include name="**/*.java"/>
		</javac>
	</target>

	<target name="jar" depends="compile">
		<jar jarfile="${app.name}.jar" basedir="${build.dir}"
				manifest="MANIFEST.MF">
			<exclude name="**/ant/*"/>
		</jar>
	</target>

	<target name="distdirs" >
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.dir}/lib" />
		<mkdir dir="${dist.dir}/examples" />
		
		<copy file="LICENSE" todir="${dist.dir}" />
		<copy file="RELEASE-NOTES" todir="${dist.dir}" />
		<copy file="BUGS" todir="${dist.dir}" />
		<copy file="TODO" todir="${dist.dir}" />
		<copy file="ChangeLog" todir="${dist.dir}" />
		<copy file="${build.version}" todir="${dist.dir}" />
		<!--copy todir="${dist.dir}/lib">
			<fileset dir="${lib.dir}"
				includes="**/*.jar"/>
		</copy-->
		<copy todir="${dist.dir}/examples">
			<fileset dir="examples"/>
		</copy>
	</target>

	<target name="bin-dist" depends="jar,extensions,docs,distdirs">
		<copy file="${app.name}.jar" todir="${dist.dir}/lib" />
		<copy todir="${dist.dir}/lib">
			<fileset dir="${basedir}" includes="${app.name}-ext*.jar"/>
			<fileset dir="${basedir}" includes="${app.name}-ant.jar"/>
		</copy>
		
		<mkdir dir="${dist.dir}/docs" />
		<copy todir="${dist.dir}/docs">
			<fileset dir="docs"/>
		</copy>
		<zip destfile="${dist.dir}.zip"
			basedir="."
			includes="${dist.dir}/**" />
	</target>

	<target name="dist" depends="clean, distdirs">
		<mkdir dir="${dist.dir}/java" />
		<copy todir="${dist.dir}/java">
			<fileset dir="java"/>
		</copy>
		
		<!-- don't forget the tests -->
		<mkdir dir="${dist.dir}/tests"/>
		<copy todir="${dist.dir}/tests">
			<fileset dir="tests"/>
		</copy>
		
		<!-- don't forget the add-ons -->
		<mkdir dir="${dist.dir}/extensions" />
		<copy todir="${dist.dir}/extensions">
			<fileset dir="${ext.dir}"/>
		</copy>

		<!-- finally do the build.xml -->
		<copy file="build.xml" todir="${dist.dir}" />
		<zip destfile="${dist.dir}-src.zip"
			basedir="."
			includes="${dist.dir}/**" />
	</target>

	<target name="docs" depends="compile">
		<mkdir dir="docs/api"/>
		<javadoc packagenames="com.townleyenterprises.*"
			windowtitle="Townley Enterprises Public API"
			sourcepath="${src.dir}"
			destdir="docs/api"
			classpathref="build.cp">
			<doctitle><![CDATA[<center><h3>Townley Enterprises Common Public API, v 3.0.0-dev<br/>API Reference</h3><br/><br/></center>]]></doctitle>
			<bottom><![CDATA[<center>Copyright &#169; 2002-2004, Andrew S. Townley and Townley Enterprises.  All Rights Reserved.<br/>This project is hosted on <a target="_top" href="http://te-code.sourceforge.net/">http://te-code.sourceforge.net</a>.</center>]]></bottom>
		</javadoc>
	</target>

	<target name="extensions" depends="ext-jaxor3.2-pre,ext-jaxor3.2-beta" />

	<target name="ext-jaxor3.2-pre" depends="jar">
		<property name="ext1.name" value="jaxor3.2-pre"/>
		<property name="ext1.build.dir" value="build/${ext1.name}/classes"/>
		<property name="ext1.src.dir" value="${ext.dir}/${ext1.name}/src"/>
		<mkdir dir="${ext1.build.dir}"/>
		<javac srcdir="${ext1.src.dir}"
			destdir="${ext1.build.dir}"
			debug="on" deprecation="on">
			<classpath>
				<path refid="build.cp"/>
				<pathelement location="${app.name}.jar"/>
				<pathelement location="${ext.dir}/${ext1.name}/lib/jaxor.jar"/>
			</classpath>
			<include name="**/*.java"/>
		</javac>
		<jar jarfile="${app.name}-ext-${ext1.name}.jar" basedir="${ext1.build.dir}"/>
	</target>
	
	<target name="ext-jaxor3.2-beta" depends="jar">
		<property name="ext2.name" value="jaxor3.2-beta"/>
		<property name="ext2.build.dir" value="build/${ext2.name}/classes"/>
		<property name="ext2.src.dir" value="${ext.dir}/${ext2.name}/src"/>
		<mkdir dir="${ext2.build.dir}"/>
		<javac srcdir="${ext2.src.dir}"
			destdir="${ext2.build.dir}"
			debug="on" deprecation="on">
			<classpath>
				<path refid="build.cp"/>
				<pathelement location="${app.name}.jar"/>
				<pathelement location="${ext.dir}/${ext2.name}/lib/jaxor.jar"/>
			</classpath>
			<include name="**/*.java"/>
		</javac>
		<jar jarfile="${app.name}-ext-${ext2.name}.jar" basedir="${ext2.build.dir}"/>
	</target>
	
	<target name="clean">
		<delete file="${app.name}.jar"/>
		<delete file="${dist.dir}.zip"/>
		<delete file="${dist.dir}-src.zip"/>
		<delete dir="build"/>
		<delete dir="docs/api"/>
		<delete dir="${dist.dir}"/>
		<delete>
			<fileset dir="${basedir}" includes="${app.name}-ext*.jar"/>
		</delete>
	</target>

	<target name="distclean" depends="bootstrap,clean">
		<buildstamp clean="true"/>
		<delete>
			<fileset dir="${basedir}" includes="${app.name}*.zip"/>
			<fileset dir="${basedir}" includes="${app.name}-ant.jar"/>
		</delete>
		<delete dir="clover"/>
	</target>

	<target name="compile-tests" depends="jar">
		<mkdir dir="${build.tests}"/>
		<copy todir="${build.tests}">
			<fileset dir="${tests.dir}"
				excludes="**/*.java"/>
		</copy>
		<javac srcdir="${tests.dir}" destdir="${build.tests}"
			debug="on" deprecation="off">
			<classpath>
				<path refid="build.cp"/>
				<path refid="tests.cp"/>
				<pathelement location="${app.name}.jar"/>
			</classpath>
			<include name="**/*.java"/>
		</javac>
	</target>

	<target name="junit" depends="compile-tests">
		<mkdir dir="${reports.tests}"/>
		<junit printsummary="yes" haltonfailure="yes" haltonerror="yes">
			<classpath>
				<path refid="build.cp"/>
				<path refid="tests.cp"/>
				<pathelement location="${build.tests}"/>
				<pathelement location="${app.name}.jar"/>
			</classpath>
			<sysproperty key="tests.data.dir" value="${tests.data.dir}"/>
			
			<formatter type="plain"/>

			<batchtest fork="no" todir="${reports.tests}">
				<fileset dir="${tests.dir}">
					<include name="**/*Test*.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!-- clover support -->
	<taskdef resource="clovertasks" classpathref="tests.cp"/>

	<target name="with-clover">
		<mkdir dir="clover"/>
		<clover-setup initString="clover/te-common.db"
				flushpolicy="interval"
				flushinterval="200">
			<fileset dir="${src.dir}"/>
		</clover-setup>
	</target>

	<target name="clover-report" depends="with-clover">
		<clover-report>
			<current outfile="clover/report" title="TE-Common">
				<format type="html"/>
			</current>
		</clover-report>
	</target>

	<target name="clover" depends="clean,with-clover,jar,junit,clover-report"/>

</project>
